{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "from __future__ import print_function\n",
    "import pandas as pd\n",
    "from nltk.tokenize import regexp_tokenize\n",
    "from gensim.models import KeyedVectors\n",
    "from gensim.models import word2vec\n",
    "from gensim.scripts import glove2word2vec\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.autograd import Variable\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "import nltk\n",
    "import random\n",
    "import numpy as np\n",
    "from collections import Counter, OrderedDict\n",
    "import nltk\n",
    "flatten = lambda l: [item for sublist in l for item in sublist]\n",
    "random.seed(224)\n",
    "\n",
    "##########################################\n",
    "#Importing wiki vector####################\n",
    "##########################################\n",
    "## Mac\n",
    "# = KeyedVectors.load_word2vec_format('/Users/marcowang/Downloads/text_project/data/word2vec_pretrain_data/wiki-news-300d-1M.vec')\n",
    "\n",
    "# Ubantu\n",
    "wiki_en = KeyedVectors.load_word2vec_format('/home/marco/Downloads/wiki-news-300d-1M.vec')\n",
    "\n",
    "print('=' * 80)\n",
    "print('Loading Success ！！')\n",
    "print('=' * 80)\n",
    "\n",
    "vocab_wiki = list(wiki_en.vocab.keys())\n",
    "len(vocab_wiki) ### pretrain vocab "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_word2vec():\n",
    "    \"\"\" Load Word2Vec Vectors\n",
    "        Return:\n",
    "            wv_from_bin: All 3 million embeddings, each lengh 300\n",
    "    \"\"\"\n",
    "    import gensim.downloader as api\n",
    "    wv_from_bin = api.load(\"word2vec-google-news-300\")\n",
    "    vocab = list(wv_from_bin.vocab.keys())\n",
    "    print(\"Loaded vocab size %i\" % len(vocab))\n",
    "    return wv_from_bin\n",
    "google = load_word2vec()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "USE_CUDA = torch.cuda.is_available()\n",
    "\n",
    "FloatTensor = torch.cuda.FloatTensor if USE_CUDA else torch.FloatTensor\n",
    "LongTensor = torch.cuda.LongTensor if USE_CUDA else torch.LongTensor\n",
    "ByteTensor = torch.cuda.ByteTensor if USE_CUDA else torch.ByteTensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getBatch(batch_size, train_data):\n",
    "    random.shuffle(train_data)\n",
    "    sindex = 0\n",
    "    eindex = batch_size\n",
    "    while eindex < len(train_data):\n",
    "        batch = train_data[sindex: eindex]\n",
    "        temp = eindex\n",
    "        eindex = eindex + batch_size\n",
    "        sindex = temp\n",
    "        yield batch\n",
    "    \n",
    "    if eindex >= len(train_data):\n",
    "        batch = train_data[sindex:]\n",
    "        yield batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "random.seed(224)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pad_to_batch(batch,max_x = 1024):\n",
    "    x,y = zip(*batch)\n",
    "    \n",
    "    x_p = []\n",
    "    for i in range(len(batch)):\n",
    "        if x[i].size(1) < max_x:\n",
    "            x_p.append(torch.cat([x[i], Variable(LongTensor([word2index['<PAD>']] * (max_x - x[i].size(1)))).view(1, -1)], 1))\n",
    "        else:\n",
    "            x_p.append(x[i])\n",
    "    return torch.cat(x_p), torch.cat(y).view(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_sequence(seq, to_index):\n",
    "    idxs = list(map(lambda w: to_index[w] if to_index.get(w) is not None else to_index[\"<UNK>\"], seq))\n",
    "    return Variable(LongTensor(idxs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mac\n",
    "#news = pd.read_csv('/Users/marcowang/Dropbox/Textnews/TextProject/sample_data/news20190406_285.csv',index_col=None)\n",
    "\n",
    "#Ubantu\n",
    "news = pd.read_csv('/home/marco/Dropbox/Textnews/TextProject/sample_data/news20190406_285.csv',index_col=None)\n",
    "\n",
    "newsText = list(news['NewsContent'])\n",
    "flatten = lambda l:[item for sublist in  l for item in sublist]\n",
    "newsToken = [regexp_tokenize(sent,pattern = '\\w+|\\$[\\d\\.]+|\\S+') for sent in newsText] #####?\n",
    "new_token = [x for x in newsToken if len(x)<=1000]\n",
    "flatToken = flatten(new_token)\n",
    "allWords = [w.lower() for w in flatToken]\n",
    "vocabulary = list(set(allWords))  # news vocabulary \n",
    "len(vocabulary) ##   Oh my G~~~~， It is difficult for me to read about technical news~， so many words ~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mac\n",
    "#data = pd.read_csv('/Users/marcowang/Dropbox/Textnews/TextProject/sample_data/tagged_data/finalInput.csv',index_col=0)\n",
    "\n",
    "#Ubantu\n",
    "data = pd.read_csv('/home/marco/Dropbox/Textnews/TextProject/sample_data/tagged_data/finalInput.csv',index_col=0)\n",
    "\n",
    "\n",
    "y_com = data.iloc[:,4:9].values # company info\n",
    "y_sent = data.iloc[:,9:].values # \n",
    "\n",
    "# negative impact label as '2'\n",
    "for i in range(y_sent.shape[0]):\n",
    "    for j in range(y_sent.shape[1]):\n",
    "        if y_sent[i][j] == -1:\n",
    "            y_sent[i][j] = 2\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "word2index={'<PAD>': 0, '<UNK>': 1} # pad means padding !\n",
    "\n",
    "for vo in vocabulary:\n",
    "    if word2index.get(vo) is None:\n",
    "        word2index[vo] = len(word2index)\n",
    "        \n",
    "index2word = {v:k for k, v in word2index.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_p, y_p = [],[]\n",
    "\n",
    "for x,y in zip(newsToken,y_sent):\n",
    "    if len(x) <=1000:\n",
    "        X_p.append(prepare_sequence(x, word2index).view(1, -1))\n",
    "        y_p.append(Variable(LongTensor(y)).view(1, -1))\n",
    "        \n",
    "    \n",
    "data_p = list(zip(X_p,y_p))\n",
    "random.shuffle(data_p)\n",
    "\n",
    "train_data = data_p[: int(len(data_p) * 0.8)]\n",
    "test_data = data_p[int(len(data_p) * 0.8):]\n",
    "maxLength = max([x[0].size(1) for x in data_p])\n",
    "print(maxLength)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_ap = [x[1][0][0].view(1, -1) for x in train_data ]\n",
    "y_bm = [x[1][0][1].view(1, -1) for x in train_data ]\n",
    "y_go = [x[1][0][2].view(1, -1) for x in train_data ]\n",
    "y_am = [x[1][0][3].view(1, -1) for x in train_data ]\n",
    "y_ms = [x[1][0][4].view(1, -1) for x in train_data ]\n",
    "train_x = [x[0] for x in train_data ]\n",
    "train_ap = list(zip(train_x,y_ap))\n",
    "train_bm = list(zip(train_x,y_bm))\n",
    "train_go = list(zip(train_x,y_go))\n",
    "train_am = list(zip(train_x,y_am))\n",
    "train_ms = list(zip(train_x,y_ms))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "pretrained = []\n",
    "\n",
    "for key in word2index.keys():\n",
    "    try:\n",
    "        pretrained.append(wiki_en[word2index[key]])\n",
    "    except:\n",
    "        pretrained.append(np.random.randn(300))\n",
    "        \n",
    "pretrained_vectors = np.vstack(pretrained)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "xxx= [len(x) for x in new_token]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(xxx)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sent(nn.Module):\n",
    "    \n",
    "    def __init__(self, vocab_size, embedding_dim):\n",
    "        super(Sent,self).__init__()\n",
    "        self.embedding_w = nn.Embedding(vocab_size, embedding_dim)\n",
    "        self.rnn = nn.LSTM(     # LSTM 效果要比 nn.RNN() 好多了\n",
    "        input_size = 300,      # vecter dimension\n",
    "        hidden_size=64,     # rnn hidden unit\n",
    "        num_layers=1,       # \n",
    "        batch_first=True,   # input & output 会是以 batch size 为第一维度的特征集 e.g. (batch, time_step, input_size)\n",
    "        )\n",
    "        self.out = nn.Linear(64, 3) # 三分类  所以就用 3 \n",
    "        \n",
    "    \n",
    "    \n",
    "    def init_weights(self, pretrained_word_vectors, is_static=True):\n",
    "        self.embedding_w.weight = nn.Parameter(torch.from_numpy(pretrained_word_vectors).float())\n",
    "        if is_static:\n",
    "            self.embedding_w.weight.requires_grad = False\n",
    "\n",
    "\n",
    "    def forward(self, inputs, is_training=False):\n",
    "        inputs = self.embedding_w(inputs) # (B,1,T,D)\n",
    "        r_out, (h_n, h_c) = self.rnn(inputs, None)\n",
    "        out = self.out(r_out[:, -1, :])\n",
    "        return out\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 20\n",
    "LR = 0.001\n",
    "TIME_STEP = 32          # rnn time step / image height\n",
    "INPUT_SIZE = 32\n",
    "\n",
    "apmodel = Sent(len(word2index), 300)\n",
    "apmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(apmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_ap)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        apmodel.zero_grad()\n",
    "        preds = apmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = apmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mac\n",
    "#news = pd.read_csv('/Users/marcowang/Dropbox/Textnews/TextProject/sample_data/news20190406_285.csv',index_col=None)\n",
    "\n",
    "#Ubantu\n",
    "news = pd.read_csv('/home/marco/Dropbox/Textnews/TextProject/sample_data/news20190406_285.csv',index_col=None)\n",
    "\n",
    "newsText = list(news['NewsContent'])\n",
    "flatten = lambda l:[item for sublist in  l for item in sublist]\n",
    "newsToken = [regexp_tokenize(sent,pattern = '\\w+|\\$[\\d\\.]+|\\S+') for sent in newsText] #####?\n",
    "new_token = [x for x in newsToken if len(x)<=1000]\n",
    "flatToken = flatten(new_token)\n",
    "allWords = [w.lower() for w in flatToken]\n",
    "vocabulary = list(set(allWords))  # news vocabulary \n",
    "len(vocabulary) ##   Oh my G~~~~， It is difficult for me to read about technical news~， so many words ~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mac\n",
    "#data = pd.read_csv('/Users/marcowang/Dropbox/Textnews/TextProject/sample_data/tagged_data/finalInput.csv',index_col=0)\n",
    "\n",
    "#Ubantu\n",
    "data = pd.read_csv('/home/marco/Dropbox/Textnews/TextProject/sample_data/tagged_data/finalInput.csv',index_col=0)\n",
    "\n",
    "\n",
    "y_com = data.iloc[:,4:9].values # company info\n",
    "y_sent = data.iloc[:,9:].values # \n",
    "\n",
    "# negative impact label as '2'\n",
    "for i in range(y_sent.shape[0]):\n",
    "    for j in range(y_sent.shape[1]):\n",
    "        if y_sent[i][j] == -1:\n",
    "            y_sent[i][j] = 2\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "word2index={'<PAD>': 0, '<UNK>': 1} # pad means padding !\n",
    "\n",
    "for vo in vocabulary:\n",
    "    if word2index.get(vo) is None:\n",
    "        word2index[vo] = len(word2index)\n",
    "        \n",
    "index2word = {v:k for k, v in word2index.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_p, y_p = [],[]\n",
    "\n",
    "for x,y in zip(newsToken,y_sent):\n",
    "    if len(x) <=1000:\n",
    "        X_p.append(prepare_sequence(x, word2index).view(1, -1))\n",
    "        y_p.append(Variable(LongTensor(y)).view(1, -1))\n",
    "        \n",
    "    \n",
    "data_p = list(zip(X_p,y_p))\n",
    "random.shuffle(data_p)\n",
    "\n",
    "train_data = data_p[: int(len(data_p) * 0.8)]\n",
    "test_data = data_p[int(len(data_p) * 0.8):]\n",
    "maxLength = max([x[0].size(1) for x in data_p])\n",
    "print(maxLength)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_ap = [x[1][0][0].view(1, -1) for x in train_data ]\n",
    "y_bm = [x[1][0][1].view(1, -1) for x in train_data ]\n",
    "y_go = [x[1][0][2].view(1, -1) for x in train_data ]\n",
    "y_am = [x[1][0][3].view(1, -1) for x in train_data ]\n",
    "y_ms = [x[1][0][4].view(1, -1) for x in train_data ]\n",
    "train_x = [x[0] for x in train_data ]\n",
    "train_ap = list(zip(train_x,y_ap))\n",
    "train_bm = list(zip(train_x,y_bm))\n",
    "train_go = list(zip(train_x,y_go))\n",
    "train_am = list(zip(train_x,y_am))\n",
    "train_ms = list(zip(train_x,y_ms))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "pretrained = []\n",
    "\n",
    "for key in word2index.keys():\n",
    "    try:\n",
    "        pretrained.append(wiki_en[word2index[key]])\n",
    "    except:\n",
    "        pretrained.append(np.random.randn(300))\n",
    "        \n",
    "pretrained_vectors = np.vstack(pretrained)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "xxx= [len(x) for x in new_token]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(xxx)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sent(nn.Module):\n",
    "    \n",
    "    def __init__(self, vocab_size, embedding_dim):\n",
    "        super(Sent,self).__init__()\n",
    "        self.embedding_w = nn.Embedding(vocab_size, embedding_dim)\n",
    "        self.rnn = nn.LSTM(     # LSTM 效果要比 nn.RNN() 好多了\n",
    "        input_size = 300,      # vecter dimension\n",
    "        hidden_size=64,     # rnn hidden unit\n",
    "        num_layers=1,       # \n",
    "        batch_first=True,   # input & output 会是以 batch size 为第一维度的特征集 e.g. (batch, time_step, input_size)\n",
    "        )\n",
    "        self.out = nn.Linear(64, 3) # 三分类  所以就用 3 \n",
    "        \n",
    "    \n",
    "    \n",
    "    def init_weights(self, pretrained_word_vectors, is_static=True):\n",
    "        self.embedding_w.weight = nn.Parameter(torch.from_numpy(pretrained_word_vectors).float())\n",
    "        if is_static:\n",
    "            self.embedding_w.weight.requires_grad = False\n",
    "\n",
    "\n",
    "    def forward(self, inputs, is_training=False):\n",
    "        inputs = self.embedding_w(inputs) # (B,1,T,D)\n",
    "        r_out, (h_n, h_c) = self.rnn(inputs, None)\n",
    "        out = self.out(r_out[:, -1, :])\n",
    "        return out\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 20\n",
    "LR = 0.001\n",
    "TIME_STEP = 32          # rnn time step / image height\n",
    "INPUT_SIZE = 32\n",
    "\n",
    "apmodel = Sent(len(word2index), 300)\n",
    "apmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(apmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_ap)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        apmodel.zero_grad()\n",
    "        preds = apmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = apmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 32          # \n",
    "INPUT_SIZE = 32\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 1024          # \n",
    "INPUT_SIZE = 1\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 64          # \n",
    "INPUT_SIZE = 16\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 16          # \n",
    "INPUT_SIZE = 64\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 32          # \n",
    "INPUT_SIZE = 32\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 16          # \n",
    "INPUT_SIZE = 64\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 1024         # \n",
    "INPUT_SIZE = 1\n",
    "\n",
    "bmmodel = Sent(len(word2index), 300)\n",
    "bmmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(bmmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_bm)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        bmmodel.zero_grad()\n",
    "        preds = bmmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = bmmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 1024         # \n",
    "INPUT_SIZE = 1\n",
    "\n",
    "gomodel = Sent(len(word2index), 300)\n",
    "gomodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(gomodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_go)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        gomodel.zero_grad()\n",
    "        preds = gomodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = gomodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 1024         # \n",
    "INPUT_SIZE = 1\n",
    "\n",
    "ammodel = Sent(len(word2index), 300)\n",
    "ammodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(ammodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_am)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        ammodel.zero_grad()\n",
    "        preds = ammodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = ammodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCH = 100\n",
    "BATCH_SIZE = 50\n",
    "LR = 0.001\n",
    "TIME_STEP = 1024         # \n",
    "INPUT_SIZE = 1\n",
    "\n",
    "msmodel = Sent(len(word2index), 300)\n",
    "msmodel.init_weights(pretrained_vectors) # initialize embedding matrix using pretrained vectors\n",
    "\n",
    "loss_function = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(msmodel.parameters(), lr=LR)\n",
    "\n",
    "for epoch in range(EPOCH):\n",
    "    losses = []\n",
    "    for i,batch in enumerate(getBatch(BATCH_SIZE, train_ms)):\n",
    "\n",
    "        inputs,targets = pad_to_batch(batch)\n",
    "        #print(targets.size())          \n",
    "        msmodel.zero_grad()\n",
    "        preds = msmodel(inputs,True)\n",
    "        #print(preds.size())\n",
    "        loss = loss_function(preds, targets)\n",
    "        losses.append(loss.data.mean())\n",
    "        loss.backward()\n",
    "        \n",
    "        #for param in model.parameters():\n",
    "        #    param.grad.data.clamp_(-3, 3)\n",
    "        \n",
    "        optimizer.step()\n",
    "        acc = 0\n",
    "        if i % 100 == 0:\n",
    "            for test in test_data:\n",
    "                oup = msmodel(test[0])\n",
    "                a = (torch.max(oup,1)[1].item())\n",
    "                b = (test[1][0][0].item())\n",
    "                if a == b:\n",
    "                    acc +=1\n",
    "            accuracy = acc/len(test_data)\n",
    "            print('Epoch: ', str(epoch)+'/'+str(EPOCH), '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import roc_curve \n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "\n",
    "dictCompany = {apmodel:0,bmmodel:1,gomodel:2,ammodel:3,msmodel:4}\n",
    "\n",
    "def getEvaluation(model_name,testData):\n",
    "    y_pred = []\n",
    "    y_test = []\n",
    "    n = dictCompany[model_name]\n",
    "    for test in testData:\n",
    "        oup = model_name(test[0])\n",
    "        y_p = (torch.max(oup,1)[1].item())\n",
    "        y_pred.append(y_p)\n",
    "        y_t = (test[1][0][n].item())\n",
    "        y_test.append(y_t)\n",
    "    #fpr, tpr,threshold = roc_curve(y_test)\n",
    "    print(classification_report(y_test,y_pred))\n",
    "    print(pd.DataFrame(data = confusion_matrix(y_test,y_pred),columns = ['Pre_Flat','Pre_Up','Pre_Down'],\n",
    "          index = ['Flat','Up','Down']))\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#apple\n",
    "print(len(test_data))\n",
    "getEvaluation(apmodel,test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#IBM\n",
    "getEvaluation(bmmodel,test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#google\n",
    "getEvaluation(gomodel,test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#amazon\n",
    "getEvaluation(ammodel,test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#microsoft\n",
    "getEvaluation(msmodel,test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test = pd.read_csv('/home/marco/Dropbox/Textnews/TextProject/code/predictResult.csv')\n",
    "final_test = list(df_test['NewsContent'])\n",
    "\n",
    "finatestnewsToken = [regexp_tokenize(sent,pattern = '\\w+|\\$[\\d\\.]+|\\S+') for sent in final_test] #####?\n",
    "finatestnew_token = [x for x in finatestnewsToken if len(x)<=1000]\n",
    "finatestflatToken = flatten(finatestnew_token)\n",
    "finatestallWords = [w.lower() for w in finatestflatToken]\n",
    "finatestvocabulary = list(set(finatestallWords))  # news vocabulary \n",
    "len(finatestvocabulary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "testy_sent = df_test.iloc[:,8:].values\n",
    "len(testy_sent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(finatestnew_token)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#word2index.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "for vo in finatestvocabulary:\n",
    "    if word2index.get(vo) is None:\n",
    "        word2index[vo] = len(word2index)\n",
    "        \n",
    "index2word = {v:k for k, v in word2index.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_t, y_t = [],[]\n",
    "\n",
    "for x,y in zip(finatestnewsToken,testy_sent):\n",
    "    if len(x) <=1000:\n",
    "        X_t.append(prepare_sequence(x, word2index).view(1, -1))\n",
    "        y_t.append(Variable(LongTensor(y)).view(1, -1))\n",
    "        \n",
    "    \n",
    "data_t = list(zip(X_t,y_t))\n",
    "random.shuffle(data_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "pretrained = []\n",
    "\n",
    "for key in word2index.keys():\n",
    "    try:\n",
    "        pretrained.append(wiki_en[word2index[key]])\n",
    "    except:\n",
    "        pretrained.append(np.random.randn(300))\n",
    "        \n",
    "pretrained_vectors = np.vstack(pretrained)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getPrediction(model_name,testData):\n",
    "    y_pred = []\n",
    "    y_test = []\n",
    "    n = dictCompany[model_name]\n",
    "    for test in testData:\n",
    "        oup = model_name(test[0])\n",
    "        y_p = (torch.max(oup,1)[1].item())\n",
    "        y_pred.append(y_p)\n",
    "        y_t = (test[1][0][n].item())\n",
    "        y_test.append(y_t)\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#apple\n",
    "apmodel.init_weights(pretrained_vectors)\n",
    "appleresualt = getPrediction(apmodel,data_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ibm\n",
    "bmmodel.init_weights(pretrained_vectors)\n",
    "ibmresualt = getPrediction(bmmodel,data_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#google\n",
    "gomodel.init_weights(pretrained_vectors)\n",
    "googleresualt = getPrediction(gomodel,data_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Amazon\n",
    "ammodel.init_weights(pretrained_vectors)\n",
    "amazonresualt = getPrediction(ammodel,data_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#amazon\n",
    "msmodel.init_weights(pretrained_vectors)\n",
    "msresualt = getPrediction(msmodel,data_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "companyList = [True if len(x)<1000 else False for x in finatestnewsToken ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "answertabel = df_test.iloc[companyList,3:]\n",
    "answertable = answertabel.reset_index()\n",
    "answertable = answertable.drop('index',axis =1)\n",
    "answertable = answertable.drop('index.1',axis =1)\n",
    "answertable['APPL_senti'] = appleresualt\n",
    "answertable['IBM_senti'] = ibmresualt\n",
    "answertable['GOOGL_senti'] = googleresualt\n",
    "answertable['AMZN_senti'] = amazonresualt\n",
    "answertable['MSFT_senti'] = msresualt\n",
    "answertable = answertable.replace(2,-1)\n",
    "answertable.to_csv('toMfinal predict.csv')"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
